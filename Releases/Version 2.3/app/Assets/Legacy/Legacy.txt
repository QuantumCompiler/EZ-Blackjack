// ---- ---- ---- ---- ---- ---- ---- ---- ---- Class Dependent Methods ---- ---- ---- ---- ---- ---- ---- ---- //
// Update Game Statistics Method - update_stats
/*
* This method updates the game statistics for a player
* This method takes in a Hand object as an input and returns a hand object
*   - FuncInput(1): hand - Hand, this is the hand object that is being modified
*       - The following vectors are having values appended to them
*           - player.hand_bank_totals
*           - player.hand_wagers
*           - player.hand_nets
*           - player.hand_card_totals
*           - player.hand_hands_played
*   - FuncOutput: Hand - Hand, hand object that possesses all the attributes of a regular hand object
* This method should be implemented in the hand_comparison method
*/
Hand update_stats(Hand& hand)
{
    hand.player.hands_played += 1;
    hand.player.hand_hands_played.push_back(hand.player.hands_played);
    hand.player.hand_wagers.push_back(hand.player.wager);
    hand.player.hand_nets.push_back(hand.player.net);
    hand.player.hand_card_totals.push_back(hand.player.cards_total);
    hand.player.hand_bank_totals.push_back(hand.player.bank_total);
    return hand;
}
// Create CSV Statistics File Method - csv_stats
/*
* This method is designed to create a csv file that contains all of the trackable statistics in a Blackjack game
* This method creates a CSV File for the following statistics 
*   - Hand Number: This is the hand number that a player played
*   - Wager: This is the wager that is placed on a specific hand
*   - Net: This is the net profit / loss for a hand of a player
*   - Cards Total: This is the final hand value for a hand of a player
*   - Updated Bank: This is the updated bank total after a hand has finished for a player
* This method takes in a hand object and returns no value, but creates a CSV file
*   FuncInput(1): hand - Hand, this is the hand object that will have the statistics of the game tracked an made into a csv file
*/
void csv_stats(Hand& hand)
{
    std::string csvFileName = hand.player.name + " Results.csv";
    std::ofstream file(csvFileName);
    if (file)
    {
        file << "Hand Number, Wager, Net, Cards Total, Updated Bank" << std::endl;
        for (int i = 0; i < hand.player.hand_hands_played.size(); i++)
        {
            file << hand.player.hand_hands_played.at(i) << "," << hand.player.hand_wagers.at(i) << "," << hand.player.hand_nets.at(i)
            << "," << hand.player.hand_card_totals.at(i) << "," << hand.player.hand_bank_totals.at(i) << std::endl;
        }
        file.close();
        std::cout << "CSV File Created: " << csvFileName << std::endl; 
    }
    else if (!file)
    {
        std::cout << "Error creating CSV File: " << csvFileName << std::endl; 
    }
    else {}
}
// Blackjack Strategy Method - blackjack_strategy
/*
* This method tells the user what they should do depending on Blackjack strategy
* This method uses the strategy outlined in the Assets folder of this projects version home directory
* This method takes in two Hand objects for input parameters and a boolean value for an over ride, it does not return a value
*   - FuncInput(1): playerHand - Hand, hand object for the user
*   - FuncInput(2): dealerHand - Hand, hand object that represents the dealer
*   - FuncInput(3): override - Boolean, this is a boolean value that will over ride a players ability to be recommended to split a hand
*       - This is only set to true if we are examining a hand that has already been split
*/
void blackjack_strategy(Hand& playerHand, Hand& dealerHand, bool override)
{
    std::string BlackJack = color_text(32, "Blackjack");
    std::string ShouldDD = color_text(31, "double down");
    std::string ShouldHit = color_text(31, "hit");
    std::string ShouldStand = color_text(31, "stand");
    std::string ShouldSplit = color_text(31, "split");
    special_options(playerHand, dealerHand, override);
    if (playerHand.player.cards.size() == 2 && (check_parameter_in_hand(playerHand, "R", "Ace") || check_same_parameter_in_hand(playerHand, "R")) && !check_blackjack(playerHand))
    {
        if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "2") || check_parameter_in_hand(playerHand, "R", "3")))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggess " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "4") || check_parameter_in_hand(playerHand, "R", "5")))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && check_parameter_in_hand(playerHand, "R", "6"))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && check_parameter_in_hand(playerHand, "R", "7"))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldStand << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "8") || check_parameter_in_hand(playerHand, "R", "9")))
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
        }
        else {}
        if (check_same_parameter_in_hand(playerHand, "R"))
        {
            if (check_parameter_in_hand(playerHand, "R", "2") || check_parameter_in_hand(playerHand, "R", "3"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    else {}
                    break;
                case 8:
                case 9:
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "4"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                case 5:
                case 6:
                    if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    else {}
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "5"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_double_down) 
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    break;
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "6"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 7:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldStand << "." << std::endl;
                        break;
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "7"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 8:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                        break;
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "8"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "9"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 7:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                }
                else {}
            }
            else if (playerHand.player.cards_total == 20)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
            }
            else if (check_parameter_in_hand(playerHand, "R", "Ace"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else {}
        }
        else {}
    }
    else if (playerHand.player.cards.size() >= 2)
    {
        if (playerHand.player.cards_total >= 4 && playerHand.player.cards_total <= 8)
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
        }
        else if (playerHand.player.cards_total == 9)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (playerHand.player.cards.size() > 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 10)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (playerHand.player.cards.size() > 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 10:
            case (11):
            case (1):
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 11)
        {
            if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
            }
            else if (playerHand.player.cards.size() >= 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
            }
            else {}
        }
        else if (playerHand.player.cards_total == 12)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 4:
            case 5:
            case 6:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 13 || playerHand.player.cards_total == 14 || playerHand.player.cards_total == 15 || playerHand.player.cards_total == 16)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 17 || playerHand.player.cards_total == 18 || playerHand.player.cards_total == 19 || playerHand.player.cards_total == 20)
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
        }
        else {}
    }
    else {
        std::cout << std::endl << "Fuck" << std::endl;
    }
    
}

// Player Hand Logic - player_hand_logic
std::tuple<Hand, Hand, Hand, Shoe> player_hand_logic(Hand& playerHand, Hand& dealerHand, Hand& referenceHand, Shoe& shoe, int& hand_counter)
{
    if (!referenceHand.player.chose_split_aces) 
    {
        std::string response;
        std::string hand_tracker;
        if (hand_counter == 1)
        {
            hand_tracker = "first";
        }
        else if (hand_counter == 2)
        {
            hand_tracker = "second";
        }
        else if (hand_counter == 3)
        {
            hand_tracker = "third";
        }
        else if (hand_counter == 4)
        {
            hand_tracker = "fourth";
        }
        else if (hand_counter == 5)
        {
            hand_tracker = "fifth";
        }
        else
        {
            hand_tracker = "current";
        }
        if (hand_counter > 1)
        {
            playerHand.Hit(shoe);
        }
        else {}
        while ((response != "h" && response != "s" && response != "d") && playerHand.player.cards_total < 21)
        {
            if (!playerHand.player.has_hit)
            {
                if (referenceHand.player.chose_split_hand)
                {
                    std::cout << std::endl << "Here are the initial hands of each player for hand " << std::to_string(hand_counter) << ":" << std::endl; 
                    playerHand.Show_Hand("initial " + hand_tracker);
                    dealerHand.Show_Hand("initial");
                    std::cout << std::endl << "Would you like to hit, stand, or double down for hand " << std::to_string(hand_counter) << "?" << std::endl; 
                    blackjack_strategy(playerHand, dealerHand, true);
                    std::cout << std::endl << "Enter (h) to hit, (s) to stand, and (d) to double down for " << std::to_string(hand_counter) << ": ";
                    std::cin >> response;
                    std::cout << std::endl;
                }
                else if (!referenceHand.player.chose_split_hand)
                {
                    std::cout << std::endl << "Would you like to hit, stand, or double down?" << std::endl; 
                    blackjack_strategy(playerHand, dealerHand, true);
                    std::cout << std::endl << "Enter (h) to hit, (s) to stand, and (d) to double down: ";
                    std::cin >> response;
                    std::cout << std::endl;
                }
                else {}            
            }
            else if (playerHand.player.has_hit)
            {
                
                if (referenceHand.player.chose_split_hand)
                {
                    playerHand.Show_Hand("current " + hand_tracker);
                }
                else if (!referenceHand.player.chose_split_hand)
                {
                    playerHand.Show_Hand("current");
                }
                else {}
                dealerHand.Show_Hand("initial");
                std::cout << std::endl << "Would you like to hit (h) or stand (s)?" << std::endl; 
                blackjack_strategy(playerHand, dealerHand, true);
                std::cout << std::endl << "Enter (h) to hit and (s) to stand: ";
                std::cin >> response;
                std::cout << std::endl;
            }
            else {}
            if (response == "h")
            {
                playerHand.player.has_hit = true;
                playerHand.Hit(shoe);
                if (playerHand.player.cards_total > 21)
                {
                    std::cout << playerHand.player.display_name << " has chosen to hit and busted. Final hand total: " << playerHand.player.display_cards_total << "." << std::endl; 
                    if (referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here is " << playerHand.player.display_name << "'s final hand for hand " << std::to_string(hand_counter)
                        << " and the " << dealerHand.player.display_name << "'s current hand:" << std::endl; 
                        playerHand.Show_Hand("final " + hand_tracker);
                        dealerHand.Show_Hand("current");
                    }
                    else if (!referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here is the final hand for " << playerHand.player.display_name << " and the final hand of the " << dealerHand.player.display_name << ":" << std::endl; 
                        playerHand.Show_Hand("final");
                        dealerHand.Show_Hand("final", "show");
                    }
                    else {}
                    std::cout << std::endl;
                    
                    break;
                }
                else if (playerHand.player.cards_total < 21)
                {
                    std::cout << playerHand.player.display_name << " has chosen to hit. Current hand total: " << playerHand.player.display_cards_total << "." << std::endl; 
                    if (referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here are the current hands of each player for hand " << std::to_string(hand_counter) << ":" << std::endl;
                    }
                    else if (!referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here are the current hands of each player:" << std::endl;
                    }
                    else {}
                }
                else if (playerHand.player.cards_total == 21)
                {
                    std::cout << playerHand.player.display_name << " has chosen to hit. Final hand total: " << playerHand.player.display_cards_total << "." << std::endl; 
                    if (referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here is " << playerHand.player.display_name << "'s final hand for hand " << std::to_string(hand_counter) << " and the " 
                        << dealerHand.player.display_name << "'s current hand:" << std::endl; 
                        playerHand.Show_Hand("final " + hand_tracker);
                        dealerHand.Show_Hand("current", "");
                    }
                    else if (!referenceHand.player.chose_split_hand)
                    {
                        std::cout << std::endl << "Here is the final hand for " << playerHand.player.display_name << " and the initial hand of the " 
                        << dealerHand.player.display_name << ":" << std::endl; 
                        playerHand.Show_Hand("final");
                        dealerHand.Show_Hand("initial", "show");
                    }
                    else
                    std::cout << std::endl;
                    
                }
                else {}
                response.clear();
            }
            else if (response == "s")
            {
                std::cout << playerHand.player.display_name << " has chosen to stand. Final hand total: " << playerHand.player.display_cards_total << "." << std::endl; 
                if (referenceHand.player.chose_split_hand)
                {
                    std::cout << std::endl << "Here is " << playerHand.player.display_name << "'s final hand for hand " << std::to_string(hand_counter)
                    << " and the " << dealerHand.player.display_name << "'s current hand:" << std::endl; 
                    playerHand.Show_Hand("final " + hand_tracker);
                    dealerHand.Show_Hand("current", "");
                }
                else if (!referenceHand.player.chose_split_hand)
                {
                    std::cout << std::endl << "Here is the final hand for " << playerHand.player.display_name << " and the initial hand of the " 
                    << dealerHand.player.display_name << ":" << std::endl; 
                    playerHand.Show_Hand("final");
                    dealerHand.Show_Hand("initial", "show");
                }
                else
                std::cout << std::endl;
                
                break;
            }
            else if (response == "d" && !playerHand.player.has_hit)
            {
                if (playerHand.player.bank_total >= playerHand.player.wager)
                {
                    playerHand.player.bank_total -= playerHand.player.wager;
                    playerHand.player.wager *= 2;
                    playerHand.Hit(shoe);
                    if (playerHand.player.cards_total > 21)
                    {
                        playerHand.Update_Bank("L", playerHand, playerHand.player.wager);
                        std::cout << playerHand.player.display_name << " has doubled down and busted. Final hand total: " 
                        << playerHand.player.display_cards_total << "." << std::endl; 
                        if (referenceHand.player.chose_split_hand)
                        {
                            std::cout << std::endl << "Here is " << playerHand.player.display_name << "'s final hand for hand " << std::to_string(hand_counter)
                            << " and the " << dealerHand.player.display_name << "'s current hand:" << std::endl; 
                            playerHand.Show_Hand("final " + hand_tracker);
                            dealerHand.Show_Hand("current");
                        }
                        else if (!referenceHand.player.chose_split_hand)
                        {
                            std::cout << std::endl << "Here is the final hand for " << playerHand.player.display_name << " and the final hand of the " 
                            << dealerHand.player.display_name << ":" << std::endl; 
                            playerHand.Show_Hand("final");
                            dealerHand.Show_Hand("final", "show");
                        }
                        else
                        std::cout << std::endl;
                        
                        break;
                    }
                    else if (playerHand.player.cards_total <= 21)
                    {
                        std::cout << playerHand.player.display_name << " has doubled down. Final hand total: " << playerHand.player.display_cards_total << "." << std::endl; 
                        if (referenceHand.player.chose_split_hand)
                        {
                            std::cout << std::endl << "Here is " << playerHand.player.display_name << "'s final hand for hand " << std::to_string(hand_counter) << " and the " 
                            << dealerHand.player.display_name << "'s current hand:" << std::endl; 
                            playerHand.Show_Hand("final " + hand_tracker);
                            dealerHand.Show_Hand("current");
                        }
                        else if (!referenceHand.player.chose_split_hand)
                        {
                            std::cout << std::endl << "Here is the final hand for " << playerHand.player.display_name << " and the initial hand of the " 
                            << dealerHand.player.display_name << ":" << std::endl; 
                            playerHand.Show_Hand("final");
                            dealerHand.Show_Hand("initial", "show");
                        }
                        else {}
                        std::cout << std::endl;
                        
                        break;
                    }
                    else {}
                }
                else if (playerHand.player.bank_total < playerHand.player.wager)
                {
                    std::cout << "Your current bank total of " << playerHand.player.display_bank_total << " is not greater than your wager of "
                    << playerHand.player.display_wager << ". You cannot double down." << std::endl;
                    response.clear();
                    continue;
                }
                else {}
            }
            else if (response != "h" && response != "s" && response != "d")
            {
                if (!referenceHand.player.chose_split_hand)
                {
                    std::cout << color_text(31, "Invalid choice") << "." << std::endl; 
                }
                else if (referenceHand.player.chose_split_hand)
                {
                    std::cout << color_text(31, "Invalid choice") << "." << std::endl << std::endl; 
                }
                else {}            
                response.clear();
                continue;
            }
            else {}
        }
        referenceHand.Copy_Variables(playerHand);
        return std::make_tuple(playerHand, dealerHand, referenceHand, shoe);
    }
    else if (referenceHand.player.chose_split_aces) {
        referenceHand.Copy_Variables(playerHand);
        return std::make_tuple(playerHand, dealerHand, referenceHand, shoe);
    }
    else {}
}
// Dealer Hand Logic
std::tuple<Hand, Shoe> dealer_hand_logic(std::vector<Hand>& playerHands, Hand& dealerHand, Shoe& shoe)
{
    bool all_over_21 = true;
    for (Hand current_hand : playerHands)
    {
        if (current_hand.player.cards_total <= 21)
        {
            all_over_21 = false;
            break;
        }
        else if (current_hand.player.cards_total > 21)
        {
            all_over_21 = true;
            continue;
        }
        else {}
    }
    if (!all_over_21)
    {
        if ((dealerHand.player.cards_total >= 17 && !check_parameter_in_hand(dealerHand, "R", "Ace")) || (dealerHand.player.cards_total > 17 && check_parameter_in_hand(dealerHand, "R", "Ace")))
        {
            int total_hands = playerHands.size();
            if (total_hands > 1)
            {
                int hand_counter = 0;
                std::string hand_tracker;
                std::cout << std::endl << "Here are the final hand(s) of " << playerHands.at(0).player.display_name << " and the " << dealerHand.player.display_name << ":" << std::endl;
                for (Hand current_hand : playerHands)
                {
                    hand_counter++;
                    if (hand_counter == 1)
                    {
                        hand_tracker = " first";
                    }
                    else if (hand_counter == 2)
                    {
                        hand_tracker = " second";
                    }
                    else if (hand_counter == 3)
                    {
                        hand_tracker = " third";
                    }
                    else if (hand_counter == 4)
                    {
                        hand_tracker = " fourth";
                    }
                    else if (hand_counter == 5)
                    {
                        hand_tracker = " fifth";
                    }
                    else {}
                    current_hand.Show_Hand("final" + hand_tracker);
                }
                dealerHand.Show_Hand("final", "show");
                std::cout << std::endl << "The " << dealerHand.player.display_name << " does not need to play their hand with a final total of " 
                << dealerHand.player.display_cards_total << "." << std::endl << std::endl;
            }
            else
            {
                std::cout << std::endl << "The " << dealerHand.player.display_name << " does not need to play their hand with a final total of " << dealerHand.player.display_cards_total << "." << std::endl << std::endl;
            }
        }
        else if (dealerHand.player.cards_total < 17 || (dealerHand.player.cards_total == 17 && check_parameter_in_hand(dealerHand, "R", "Ace")))
        {
            int total_hands = playerHands.size();
            if (total_hands > 1)
            {
                int hand_counter = 0;
                std::string hand_tracker;
                std::cout << std::endl << "Here are the final hand(s) of " << playerHands.at(0).player.display_name << " and the initial hand of the " << dealerHand.player.display_name << ":" << std::endl;
                for (Hand current_hand : playerHands)
                {
                    hand_counter++;
                    if (hand_counter == 1)
                    {
                        hand_tracker = " first";
                    }
                    else if (hand_counter == 2)
                    {
                        hand_tracker = " second";
                    }
                    else if (hand_counter == 3)
                    {
                        hand_tracker = " third";
                    }
                    else if (hand_counter == 4)
                    {
                        hand_tracker = " fourth";
                    }
                    else if (hand_counter == 5)
                    {
                        hand_tracker = " fifth";
                    }
                    else {}
                    current_hand.Show_Hand("final" + hand_tracker);
                }
                dealerHand.Show_Hand("initial", "show");
                std::cout << std::endl << "The " << dealerHand.player.display_name << " will now play their hand." << std::endl << std::endl;
            }
            else
            {
                std::cout << std::endl << "The " << dealerHand.player.display_name << " will now play their hand." << std::endl << std::endl;
            }
            while ((dealerHand.player.cards_total < 17 || (dealerHand.player.cards_total <= 17 && check_parameter_in_hand(dealerHand, "R", "Ace"))))
            {
                bool aces_all_ones = true;
                for (Card current_card : dealerHand.player.cards)
                {
                    if (check_card_parameter(current_card.card.rank, "Ace"))
                    {
                        current_card.card.card_value = 11;
                        aces_all_ones = false;
                        break;
                    }
                    else if (check_card_parameter(current_card.card.rank, "Ace"))
                    {
                        current_card.card.card_value = 1;
                        aces_all_ones = true;
                        continue;
                    }
                    else {}
                }
                if (!aces_all_ones || !check_parameter_in_hand(dealerHand, "R", "Ace"))
                {
                    dealerHand.Hit(shoe);
                    std::cout << dealerHand.player.display_name << " hits hand: ";
                    dealerHand.Show_Hand("", "cards");
                }
                else if (aces_all_ones)
                {
                    std::cout << dealerHand.player.display_name << " final hand ";
                    dealerHand.Show_Hand("", "cards");
                    break;
                }
            }
            std::cout << std::endl;
        }
        else {}
    }
    else if (all_over_21)
    {
        std::cout << playerHands.at(0).player.display_name << " has busted on all of their hands. " << dealerHand.player.display_name << " does not need to play their hand." << std::endl << std::endl;
        int total_hands = playerHands.size();
        if (total_hands > 1)
        {
            int hand_counter = 0;
            std::string hand_tracker;
            std::cout << "The final hands of " << playerHands.at(0).player.display_name << " and the " << dealerHand.player.display_name << " are:" << std::endl;
            for (Hand current_hand : playerHands)
            {
                hand_counter++;
                if (hand_counter == 1)
                {
                    hand_tracker = " first";
                }
                else if (hand_counter == 2)
                {
                    hand_tracker = " second";
                }
                else if (hand_counter == 3)
                {
                    hand_tracker = " third";
                }
                else if (hand_counter == 4)
                {
                    hand_tracker = " fourth";
                }
                else if (hand_counter == 5)
                {
                    hand_tracker = " fifth";
                }
                else {}
                current_hand.Show_Hand("final" + hand_tracker);
            }
            dealerHand.Show_Hand("final", "show");
        }
        else {}
    }
    else {}
    return std::make_tuple(dealerHand, shoe);
}
// Hand Comparison Logic Method
std::tuple<Hand, Hand, Shoe> hand_comparison(Hand& playerHand, Hand& dealerHand, Shoe& shoe, int& playerHandCount, int& currentHandCounter)
{
    std::string hand_tracker;
    bool multiple_hands = false;
    if (playerHandCount > 1)
    {
        multiple_hands = true;
        if (currentHandCounter == 1)
        {
            hand_tracker = " first";
        }
        else if (currentHandCounter == 2)
        {
            hand_tracker = " second";
        }
        else if (currentHandCounter == 3)
        {
            hand_tracker = " third";
        }
        else if (currentHandCounter == 4)
        {
            hand_tracker = " fourth";
        }
        else if (currentHandCounter == 5)
        {
            hand_tracker = " fifth";
        }
        else
        {
            hand_tracker.clear();
        }
    }
    else {}
    if (playerHand.player.cards_total <= 21)
    {
        if (playerHand.player.cards_total == dealerHand.player.cards_total)
        {
            playerHand.Update_Bank("P", playerHand, playerHand.player.wager);
            
            if (!multiple_hands)
            {
                std::cout << "Both players have the same final value of " << playerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player are:" << std::endl; 
                playerHand.Show_Hand("final");
            }
            else if (multiple_hands)
            {
                std::cout << "Both players have the same final value of " << playerHand.player.display_cards_total << " for hand " << std::to_string(currentHandCounter) << ". " << std::endl; 
                std::cout << std::endl << "The final hands of each player for hand " << std::to_string(currentHandCounter) << " are:" << std::endl; 
                playerHand.Show_Hand("final" + hand_tracker);
            }
            else {} 
            dealerHand.Show_Hand("final", "show");
            if (!multiple_hands)
            {
                std::cout << std::endl << "This hand is a push. " << playerHand.player.display_name << " nets " << playerHand.player.display_net << " this hand." << std::endl;
            }
            else if (multiple_hands)
            {
                std::cout << std::endl << "Hand " << std::to_string(currentHandCounter) << " is a push. " << playerHand.player.display_name << " nets " << playerHand.player.display_net
                << " for hand " << std::to_string(currentHandCounter) << "." << std::endl << std::endl;
            }
            else {}
        }
        else if (dealerHand.player.cards_total > playerHand.player.cards_total && dealerHand.player.cards_total <= 21)
        {
            playerHand.Update_Bank("L", playerHand, playerHand.player.wager);
            
            if (!multiple_hands)
            {
                std::cout << dealerHand.player.display_name << " has a greater final value of " << dealerHand.player.display_cards_total << " compared to "
                << playerHand.player.display_name << "'s final value of " << playerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player are:" << std::endl; 
                playerHand.Show_Hand("final");
            }
            else if (multiple_hands)
            {
                std::cout << dealerHand.player.display_name << " has a greater final value of " << dealerHand.player.display_cards_total << " for hand " << std::to_string(currentHandCounter)
                << " compared to " << playerHand.player.display_name << "'s final value of " << playerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player for hand " << std::to_string(currentHandCounter) << " are:" << std::endl; 
                playerHand.Show_Hand("final" + hand_tracker);
            }
            else {}
            dealerHand.Show_Hand("final", "show");
            if (!multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " loses the current hand. " << playerHand.player.display_name << " nets " << playerHand.player.display_net << " this hand." << std::endl;
            }
            else if (multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " loses hand " << std::to_string(currentHandCounter) << ". " << playerHand.player.display_name << " nets " << playerHand.player.display_net
                << " for hand " << std::to_string(currentHandCounter) << "." << std::endl << std::endl;
            }
            else {}
        }
        else if (dealerHand.player.cards_total < playerHand.player.cards_total)
        {
            playerHand.Update_Bank("W", playerHand, playerHand.player.wager);
            
            if (!multiple_hands)
            {
                std::cout << playerHand.player.display_name << " has a greater final value of " << playerHand.player.display_cards_total << " compared to "
                << dealerHand.player.display_name << "'s final value of " << dealerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player are:" << std::endl; 
                playerHand.Show_Hand("final");
            }
            else if (multiple_hands)
            {
                std::cout << playerHand.player.display_name << " has a greater final value of " << playerHand.player.display_cards_total << " for hand " << std::to_string(currentHandCounter)
                << " compared to " << dealerHand.player.display_name << "'s final value of " << dealerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player for hand " << std::to_string(currentHandCounter) << " are:" << std::endl; 
                playerHand.Show_Hand("final" + hand_tracker);
            }
            else {}
            dealerHand.Show_Hand("final", "show");
            if (!multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " wins the current hand. " << playerHand.player.display_name << " nets " << playerHand.player.display_net
                << " this hand." << std::endl;
            }
            else if (multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " wins hand " << std::to_string(currentHandCounter) << ". " << playerHand.player.display_name << " nets " << playerHand.player.display_net
                << " for hand " << std::to_string(currentHandCounter) << "." << std::endl << std::endl;
            }
            else {}
        }
        else if (dealerHand.player.cards_total > 21)
        {
            playerHand.Update_Bank("W", playerHand, playerHand.player.wager);
            
            if (!multiple_hands)
            {
                std::cout << dealerHand.player.display_name << " has busted with a final value of " << dealerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player for the current hand are:" << std::endl; 
                playerHand.Show_Hand("final");
            }
            else if (multiple_hands)
            {
                std::cout << dealerHand.player.display_name << " has busted with a final value of " << dealerHand.player.display_cards_total << "." << std::endl; 
                std::cout << std::endl << "The final hands of each player for hand " << std::to_string(currentHandCounter) << " are:" << std::endl; 
                playerHand.Show_Hand("final" + hand_tracker);
            }
            else {}
            dealerHand.Show_Hand("final", "show");
            if (!multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " wins the current hand. " << playerHand.player.display_name << " nets " << playerHand.player.display_net << " this hand." << std::endl;
            }
            else if (multiple_hands)
            {
                std::cout << std::endl << playerHand.player.display_name << " wins hand " << std::to_string(currentHandCounter) << ". " << playerHand.player.display_name << " nets " << playerHand.player.display_net
                << " for hand " << std::to_string(currentHandCounter) << "." << std::endl << std::endl;
            }
            else {}
        }
        else {}
    }
    else if (playerHand.player.cards_total > 21)
    {
        playerHand.Update_Bank("L", playerHand, playerHand.player.wager);
        
        if (!multiple_hands)
        {
            std::cout << playerHand.player.display_name << " has busted with a final value of " << playerHand.player.display_cards_total << "." << std::endl; 
            std::cout << std::endl << "The final hands of each player for the current hand are:" << std::endl; 
            playerHand.Show_Hand("final");
        }
        else if (multiple_hands)
        {
            std::cout << playerHand.player.display_name << " has busted with a final value of " << playerHand.player.display_cards_total << " for hand " << std::to_string(currentHandCounter) << "." << std::endl; 
            std::cout << std::endl << "The final hands of each player for hand " << std::to_string(currentHandCounter) << " are:" << std::endl; 
            playerHand.Show_Hand("final" + hand_tracker);
        }
        else {}
        dealerHand.Show_Hand("final", "show");
        if (!multiple_hands)
        {
            std::cout << std::endl << playerHand.player.display_name << " loses the current hand. " << playerHand.player.display_name << " nets " << playerHand.player.display_net << " this hand." << std::endl;
        }
        else if (multiple_hands)
        {
            std::cout << std::endl << playerHand.player.display_name << " loses hand " << std::to_string(currentHandCounter) << ". " << playerHand.player.display_name << " nets " << playerHand.player.display_net
            << " for hand " << std::to_string(currentHandCounter) << "." << std::endl << std::endl;
        }
        else {}
    }
    else {}
    update_stats(playerHand);
    return std::make_tuple(playerHand, dealerHand, shoe);
}
// Game Logic Method
std::tuple<Hand, Hand, Shoe> game_logic(Hand& playerHand, Hand& dealerHand, Shoe& shoe) {
    auto showing_ace = dealer_showing_ace(playerHand, dealerHand, shoe);
    playerHand = std::get<0>(showing_ace);
    dealerHand = std::get<1>(showing_ace);
    shoe = std::get<2>(showing_ace);
    bool showing_ace_cont = std::get<3>(showing_ace);
    if (showing_ace_cont) 
    {
        // Player same rank check
        auto same_rank = player_same_rank(playerHand, dealerHand, shoe);
        std::vector<Hand> sr_hands = std::get<0>(same_rank);
        playerHand = std::get<1>(same_rank);
        dealerHand = std::get<2>(same_rank);
        shoe = std::get<3>(same_rank);
        int sr_hand_count = std::get<4>(same_rank);
        sr_hand_count %= sr_hand_count;
        // Player hand logic check
        std::vector<Hand> phl_hands;
        for (Hand& current_hand : sr_hands) 
        {
            sr_hand_count++;
            auto hand_logic = player_hand_logic(current_hand, dealerHand, playerHand, shoe, sr_hand_count);
            phl_hands.insert(phl_hands.begin(), std::get<0>(hand_logic));
            dealerHand = std::get<1>(hand_logic);
            playerHand = std::get<2>(hand_logic);
            shoe = std::get<3>(hand_logic);
        }
        std::reverse(phl_hands.begin(), phl_hands.end());
        // Dealer hand logic
        auto dealerHand_logic = dealer_hand_logic(phl_hands, dealerHand, shoe);
        dealerHand = std::get<0>(dealerHand_logic);
        shoe = std::get<1>(dealerHand_logic);
        // Hand comparison logic
        std::vector<Hand> hcl_hands;
        int playerHand_count = phl_hands.size();
        int currentHand_counter = 1;
        for (Hand& current_hand : phl_hands)
        {
            current_hand.Copy_Variables(playerHand);
            auto comparison_logic = hand_comparison(current_hand, dealerHand, shoe, playerHand_count, currentHand_counter);
            playerHand = std::get<0>(comparison_logic);
            dealerHand = std::get<1>(comparison_logic);
            shoe = std::get<2>(comparison_logic);
            hcl_hands.insert(hcl_hands.begin(), std::get<0>(comparison_logic));
            currentHand_counter++;
        }
        std::reverse(hcl_hands.begin(), hcl_hands.end());
        for (Hand& current_hand : hcl_hands) {
            current_hand.Reset("HandOver");
        }
    }
    else if (!showing_ace_cont) {}
    else {}
    return std::make_tuple(playerHand, dealerHand, shoe);
}
// Play game
void play_game()
{
    // Create Objects
    Shoe gameShoe;
    Hand playerHand;
    Hand dealerHand;
    // Set names of players
    dealerHand.player.name = "Dealer";
    playerHand.Name();
    // Take in Bank deposit of users
    playerHand.Deposit();
    // Create Shoe
    gameShoe.Deck_Count();
    gameShoe.Create_Shoe();
    gameShoe.Shuffle();
    while (gameShoe.deck.cards.size() >= 13 && playerHand.player.bank_total > 0)
    {
        auto gameLogic_result = game_logic(playerHand, dealerHand, gameShoe);
        playerHand = std::get<0>(gameLogic_result);
        dealerHand = std::get<1>(gameLogic_result);
        gameShoe = std::get<2>(gameLogic_result);
        bool continue_playing = false;
        playerHand.Reset("HandOver");
        dealerHand.Reset("HandOver");
        if (playerHand.player.bank_total > 0)
        {
            char cont_playing_input;
            while (true)
            {
                std::cout << std::endl << "Would you like to continue playing? (y/n): ";
                std::cin >> cont_playing_input;
                if (cont_playing_input == 'y')
                {
                    if (gameShoe.deck.cards.size() >= 13)
                    {
                        std::cout << std::endl << gameShoe.deck.cards.size() << " cards left in shoe. " << std::endl;
                        std::cout << std::endl << "Dealing new hands." << std::endl; time_sleep(5000);
                        clear_terminal();
                        break;
                    }
                    else if (gameShoe.deck.cards.size() < 13)
                    {
                        std::cout << std::endl << gameShoe.deck.cards.size() << " cards left in shoe. " << std::endl;
                        std::cout << std::endl << "Shuffling a new shoe." << std::endl;
                        gameShoe.deck.cards.clear();
                        gameShoe.Create_Shoe();
                        gameShoe.Shuffle(); time_sleep(5000);
                        clear_terminal();
                        break;
                    }
                    else
                    {
                        break;
                    }
                }
                else if (cont_playing_input == 'n')
                {
                    continue_playing = false;
                    std::cout << std::endl << playerHand.player.display_name << " has chosen to quit playing. Final bank total: " << playerHand.player.display_bank_total << std::endl;
                    std::cout << std::endl << "Thank you for playing." << std::endl; time_sleep(5000);
                    clear_terminal();
                    break;
                }
                else
                {
                    continue;
                }
            }
            if (cont_playing_input == 'y')
            {
                continue_playing = true;
            }
            else if (cont_playing_input == 'n')
            {
                continue_playing = false;
            }
            else {}
        }
        else if (playerHand.player.bank_total == 0)
        {
            std::cout << std::endl << playerHand.player.name << " has run out of currency in their bank. " << std::endl;
            char currency_continue;
            while (true)
            {
                std::cout << std::endl << "Would you like to deposit more currency into your bank? (y/n): ";
                std::cin >> currency_continue;
                if (currency_continue == 'y')
                {
                    playerHand.Deposit(); time_sleep(5000);
                    clear_terminal();
                    break;
                }
                else if (currency_continue == 'n')
                {
                    std::cout << std::endl << playerHand.player.name << " has ran out of currency and has chosen to " << "not deposit more currency into their bank. Game over." << std::endl;
                    std::cout << std::endl << "Thank you for playing." << std::endl; time_sleep(5000);
                    clear_terminal();
                    break;
                }
                else
                {
                    continue;
                }
            }
            if (currency_continue == 'y')
            {
                continue_playing = true;
            }
            else if (currency_continue == 'n')
            {
                continue_playing = false;
            }
            else {}
        }
        else {}
        if (!continue_playing)
        {
            break;
        }
        else if (continue_playing)
        {
            continue;
        }
        else {}
    }
    csv_stats(playerHand);
}