// ---- ---- ---- ---- ---- ---- ---- ---- ---- Class Dependent Methods ---- ---- ---- ---- ---- ---- ---- ---- //
// Update Game Statistics Method - update_stats
/*
* This method updates the game statistics for a player
* This method takes in a Hand object as an input and returns a hand object
*   - FuncInput(1): hand - Hand, this is the hand object that is being modified
*       - The following vectors are having values appended to them
*           - player.hand_bank_totals
*           - player.hand_wagers
*           - player.hand_nets
*           - player.hand_card_totals
*           - player.hand_hands_played
*   - FuncOutput: Hand - Hand, hand object that possesses all the attributes of a regular hand object
* This method should be implemented in the hand_comparison method
*/
Hand update_stats(Hand& hand)
{
    hand.player.hands_played += 1;
    hand.player.hand_hands_played.push_back(hand.player.hands_played);
    hand.player.hand_wagers.push_back(hand.player.wager);
    hand.player.hand_nets.push_back(hand.player.net);
    hand.player.hand_card_totals.push_back(hand.player.cards_total);
    hand.player.hand_bank_totals.push_back(hand.player.bank_total);
    return hand;
}
// Create CSV Statistics File Method - csv_stats
/*
* This method is designed to create a csv file that contains all of the trackable statistics in a Blackjack game
* This method creates a CSV File for the following statistics 
*   - Hand Number: This is the hand number that a player played
*   - Wager: This is the wager that is placed on a specific hand
*   - Net: This is the net profit / loss for a hand of a player
*   - Cards Total: This is the final hand value for a hand of a player
*   - Updated Bank: This is the updated bank total after a hand has finished for a player
* This method takes in a hand object and returns no value, but creates a CSV file
*   FuncInput(1): hand - Hand, this is the hand object that will have the statistics of the game tracked an made into a csv file
*/
void csv_stats(Hand& hand)
{
    std::string csvFileName = hand.player.name + " Results.csv";
    std::ofstream file(csvFileName);
    if (file)
    {
        file << "Hand Number, Wager, Net, Cards Total, Updated Bank" << std::endl;
        for (int i = 0; i < hand.player.hand_hands_played.size(); i++)
        {
            file << hand.player.hand_hands_played.at(i) << "," << hand.player.hand_wagers.at(i) << "," << hand.player.hand_nets.at(i)
            << "," << hand.player.hand_card_totals.at(i) << "," << hand.player.hand_bank_totals.at(i) << std::endl;
        }
        file.close();
        std::cout << "CSV File Created: " << csvFileName << std::endl; 
    }
    else if (!file)
    {
        std::cout << "Error creating CSV File: " << csvFileName << std::endl; 
    }
    else {}
}