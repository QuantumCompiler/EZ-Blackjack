// ---- ---- ---- ---- ---- ---- ---- ---- ---- Class Dependent Methods ---- ---- ---- ---- ---- ---- ---- ---- //
// Update Game Statistics Method - update_stats
/*
* This method updates the game statistics for a player
* This method takes in a Hand object as an input and returns a hand object
*   - FuncInput(1): hand - Hand, this is the hand object that is being modified
*       - The following vectors are having values appended to them
*           - player.hand_bank_totals
*           - player.hand_wagers
*           - player.hand_nets
*           - player.hand_card_totals
*           - player.hand_hands_played
*   - FuncOutput: Hand - Hand, hand object that possesses all the attributes of a regular hand object
* This method should be implemented in the hand_comparison method
*/
Hand update_stats(Hand& hand)
{
    hand.player.hands_played += 1;
    hand.player.hand_hands_played.push_back(hand.player.hands_played);
    hand.player.hand_wagers.push_back(hand.player.wager);
    hand.player.hand_nets.push_back(hand.player.net);
    hand.player.hand_card_totals.push_back(hand.player.cards_total);
    hand.player.hand_bank_totals.push_back(hand.player.bank_total);
    return hand;
}
// Create CSV Statistics File Method - csv_stats
/*
* This method is designed to create a csv file that contains all of the trackable statistics in a Blackjack game
* This method creates a CSV File for the following statistics 
*   - Hand Number: This is the hand number that a player played
*   - Wager: This is the wager that is placed on a specific hand
*   - Net: This is the net profit / loss for a hand of a player
*   - Cards Total: This is the final hand value for a hand of a player
*   - Updated Bank: This is the updated bank total after a hand has finished for a player
* This method takes in a hand object and returns no value, but creates a CSV file
*   FuncInput(1): hand - Hand, this is the hand object that will have the statistics of the game tracked an made into a csv file
*/
void csv_stats(Hand& hand)
{
    std::string csvFileName = hand.player.name + " Results.csv";
    std::ofstream file(csvFileName);
    if (file)
    {
        file << "Hand Number, Wager, Net, Cards Total, Updated Bank" << std::endl;
        for (int i = 0; i < hand.player.hand_hands_played.size(); i++)
        {
            file << hand.player.hand_hands_played.at(i) << "," << hand.player.hand_wagers.at(i) << "," << hand.player.hand_nets.at(i)
            << "," << hand.player.hand_card_totals.at(i) << "," << hand.player.hand_bank_totals.at(i) << std::endl;
        }
        file.close();
        std::cout << "CSV File Created: " << csvFileName << std::endl; 
    }
    else if (!file)
    {
        std::cout << "Error creating CSV File: " << csvFileName << std::endl; 
    }
    else {}
}
// Blackjack Strategy Method - blackjack_strategy
/*
* This method tells the user what they should do depending on Blackjack strategy
* This method uses the strategy outlined in the Assets folder of this projects version home directory
* This method takes in two Hand objects for input parameters and a boolean value for an over ride, it does not return a value
*   - FuncInput(1): playerHand - Hand, hand object for the user
*   - FuncInput(2): dealerHand - Hand, hand object that represents the dealer
*   - FuncInput(3): override - Boolean, this is a boolean value that will over ride a players ability to be recommended to split a hand
*       - This is only set to true if we are examining a hand that has already been split
*/
void blackjack_strategy(Hand& playerHand, Hand& dealerHand, bool override)
{
    std::string BlackJack = color_text(32, "Blackjack");
    std::string ShouldDD = color_text(31, "double down");
    std::string ShouldHit = color_text(31, "hit");
    std::string ShouldStand = color_text(31, "stand");
    std::string ShouldSplit = color_text(31, "split");
    special_options(playerHand, dealerHand, override);
    if (playerHand.player.cards.size() == 2 && (check_parameter_in_hand(playerHand, "R", "Ace") || check_same_parameter_in_hand(playerHand, "R")) && !check_blackjack(playerHand))
    {
        if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "2") || check_parameter_in_hand(playerHand, "R", "3")))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggess " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "4") || check_parameter_in_hand(playerHand, "R", "5")))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && check_parameter_in_hand(playerHand, "R", "6"))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && check_parameter_in_hand(playerHand, "R", "7"))
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldStand << "." << std::endl;
                }
                else if (!playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (check_parameter_in_hand(playerHand, "R", "Ace") && (check_parameter_in_hand(playerHand, "R", "8") || check_parameter_in_hand(playerHand, "R", "9")))
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
        }
        else {}
        if (check_same_parameter_in_hand(playerHand, "R"))
        {
            if (check_parameter_in_hand(playerHand, "R", "2") || check_parameter_in_hand(playerHand, "R", "3"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    else {}
                    break;
                case 8:
                case 9:
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "4"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                case 5:
                case 6:
                    if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    else {}
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "5"))
            {
                switch (dealerHand.player.cards[1].card.card_value)
                {
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    if (playerHand.player.can_double_down && !playerHand.player.has_hit)
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                    }
                    else if (!playerHand.player.can_double_down) 
                    {
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    }
                    break;
                case 10:
                case 11:
                case 1:
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                    break;
                default:
                    break;
                }
            }
            else if (check_parameter_in_hand(playerHand, "R", "6"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 7:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldStand << "." << std::endl;
                        break;
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "7"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 8:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << " or " << ShouldHit << "." << std::endl;
                        break;
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "8"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else if (check_parameter_in_hand(playerHand, "R", "9"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                        break;
                    case 7:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                }
                else {}
            }
            else if (playerHand.player.cards_total == 20)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
            }
            else if (check_parameter_in_hand(playerHand, "R", "Ace"))
            {
                if (playerHand.player.can_split_hand && (!playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldSplit << "." << std::endl;
                }
                else if (!playerHand.player.can_split_hand || (playerHand.player.split_decision && !playerHand.player.chose_split_hand))
                {
                    switch (dealerHand.player.cards[1].card.card_value)
                    {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 1:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                        break;
                    case 4:
                    case 5:
                    case 6:
                        std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                        break;
                    default:
                        break;
                    }
                }
                else {}
            }
            else {}
        }
        else {}
    }
    else if (playerHand.player.cards.size() >= 2)
    {
        if (playerHand.player.cards_total >= 4 && playerHand.player.cards_total <= 8)
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
        }
        else if (playerHand.player.cards_total == 9)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (playerHand.player.cards.size() > 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 10)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
                }
                else if (playerHand.player.cards.size() > 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
                {
                    std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                }
                else {}
                break;
            case 10:
            case (11):
            case (1):
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 11)
        {
            if (playerHand.player.cards.size() == 2 && playerHand.player.can_double_down && !playerHand.player.has_hit)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldDD << " or " << ShouldHit << "." << std::endl;
            }
            else if (playerHand.player.cards.size() >= 2 || !playerHand.player.can_double_down || playerHand.player.has_hit)
            {
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
            }
            else {}
        }
        else if (playerHand.player.cards_total == 12)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            case 4:
            case 5:
            case 6:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 13 || playerHand.player.cards_total == 14 || playerHand.player.cards_total == 15 || playerHand.player.cards_total == 16)
        {
            switch (dealerHand.player.cards[1].card.card_value)
            {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
                break;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 1:
                std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldHit << "." << std::endl;
                break;
            default:
                break;
            }
        }
        else if (playerHand.player.cards_total == 17 || playerHand.player.cards_total == 18 || playerHand.player.cards_total == 19 || playerHand.player.cards_total == 20)
        {
            std::cout << std::endl << BlackJack << " strategy suggests " << playerHand.player.display_name << " should " << ShouldStand << "." << std::endl;
        }
        else {}
    }
    else {
        std::cout << std::endl << "Fuck" << std::endl;
    } 
}
